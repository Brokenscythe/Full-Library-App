// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserType {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model UserGender {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model UserLogins {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  date       DateTime
  created_at DateTime?
  updated_at DateTime?
}

model User {
  id                 Int           @id @default(autoincrement())
  type               UserType?     @relation(fields: [typeId], references: [id])
  typeId             Int?
  gender             UserGender?   @relation(fields: [genderId], references: [id])
  genderId           Int?
  name               String
  JMBG               String        @unique
  email              String        @unique
  username           String        @unique
  password           String
  photo              String?
  remember_token     String?
  confirmation_token String?
  confirmed          Boolean
  email_verified_at  DateTime?
  last_login_at      DateTime?
  created_at         DateTime?     @default(now())
  updated_at         DateTime?
  login_count        Int?          @default(0)
  active             Int?
  logins             UserLogins[]
  rent               Rent[]        @relation("rents")
  borrow             Rent[]        @relation("borrows")
  reservationsFor    Reservation[] @relation("reservationFor")
  reservationsBy     Reservation[] @relation("reservationBy")
  resrvationsClosed  Reservation[] @relation("reservationClosed")
}

model Category {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  iconPath    String?
  description String?
  books       BookCategory[]
}

model Letter {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Language {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Binding {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Format {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Author {
  id          Int      @id @default(autoincrement())
  nameSurname String   @unique
  photo       String
  biography   String   @db.Text
  wikipedia   String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  books       Book[]
}

model Publisher {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Genre {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]
}

model Gallery {
  id     Int    @id @default(autoincrement())
  book   Book   @relation(fields: [bookId], references: [id])
  bookId Int
  photo  String
  cover  Int
}

model Book {
  id             Int            @id @default(autoincrement())
  title          String
  page_count     Int
  letter         Letter         @relation(fields: [letterId], references: [id])
  letterId       Int
  language       Language       @relation(fields: [languageId], references: [id])
  languageId     Int
  binding        Binding        @relation(fields: [bindingId], references: [id])
  bindingId      Int
  format         Format         @relation(fields: [formatId], references: [id])
  formatId       Int
  publisher      Publisher      @relation(fields: [publisherId], references: [id])
  publisherId    Int
  isbn           String         @unique
  quantity_count Int
  rented_count   Int
  reserved_count Int
  body           String         @db.Text
  year           Int
  pdf            String
  authors        Author[]
  categories     BookCategory[]
  genres         Genre[]
  galleries      Gallery[]
  reservations   Reservation[]
  rents          Rent[]
}

model BookCategory {
  book       Book     @relation(fields: [bookId], references: [id])
  bookId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([bookId, categoryId])
}

model BookStatus {
  id           Int          @id @default(autoincrement())
  status       String       @unique
  rentStatuses RentStatus[]
}

model RentStatus {
  id           Int        @id @default(autoincrement())
  bookStatus   BookStatus @relation(fields: [bookStatusId], references: [id])
  bookStatusId Int
  rents        Rent[]
}

model Rent {
  id           Int        @id @default(autoincrement())
  book         Book       @relation(fields: [bookId], references: [id])
  bookId       Int
  rentUser     User       @relation("rents", fields: [rentUserId], references: [id])
  rentUserId   Int
  borrowUser   User       @relation("borrows", fields: [borrowUserId], references: [id])
  borrowUserId Int
  issue_date   DateTime
  return_date  DateTime
  rentStatus   RentStatus @relation(fields: [rentStatusId], references: [id])
  rentStatusId Int
}

model CancellationReason {
  id           Int           @id @default(autoincrement())
  name         String
  reservations Reservation[]
}

model ReservationStatus {
  id           Int           @id @default(autoincrement())
  name         String
  reservations Reservation[]
}

model Reservation {
  id                       Int                 @id @default(autoincrement())
  book                     Book                @relation(fields: [bookId], references: [id])
  bookId                   Int
  reservationMadeForUser   User                @relation("reservationFor", fields: [reservationMadeForUserId], references: [id])
  reservationMadeForUserId Int
  reservationMadeByUser    User                @relation("reservationBy", fields: [reservationMadeByUserId], references: [id])
  reservationMadeByUserId  Int
  closeUser                User                @relation("reservationClosed", fields: [closeUserId], references: [id])
  closeUserId              Int
  closureReason            CancellationReason  @relation(fields: [closureReasonId], references: [id])
  closureReasonId          Int
  request_date             DateTime
  reservation_date         DateTime
  close_date               DateTime
  reservationStatuses      ReservationStatus[]
}
